{"version":3,"file":"tests.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACNA,MAAM,2BAA4B;;ACAlC,MAAM,oBAA4B;;;ACAlC;AAEA;AAEA,IAAME,UAAU,GAAGC,KAAK,CAACC,UAAzB;AACA,IAAMC,cAAc,GAAG,gBAAvB,EACA;AACA;AACA;;AAEA,IAAMC,SAAuC,GAAG;AAC5CC,EAAAA,UAAU,EAAE;AACRC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb,KADE;AAERC,IAAAA,QAAQ,EAAE,mBAFF;AAGRC,IAAAA,GAAG,EAAE,CAHG;AAIRC,IAAAA,WAAW,EAAE,IAJL;AAKRC,IAAAA,UAAU,EAAE;AALJ,GADgC,CAQ5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAvD4C,CAAhD;AA0DO,IAAMC,OAAgB,GAAG;AAC5BR,EAAAA,SAAS,EAATA,SAD4B;AACjBS,EAAAA,UAAU,EAAE;AACnB,6CAAyC,CAAC;AACtCC,MAAAA,SAAS,EAAE,WAD2B;AAEtCC,MAAAA,WAAW,EAAE;AAFyB,KAAD;AADtB;AADK,CAAzB,EASP;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAAe,SAAS,QAAG;AACvB;AACA;AACA,MAAMC,GAAG,GAAGjB,kBAAA,WAAYC,UAAZ,SAAyBG,cAAzB,EAAZ;AACAL,EAAAA,qCAAK,CAACkB,GAAD,EAAM;AAAE,oBAAgB,kBAACE,CAAD;AAAA,aAAOA,CAAC,CAACC,MAAF,IAAY,GAAnB;AAAA;AAAlB,GAAN,CAAL;AACH,C","sources":["webpack://typescript/webpack/bootstrap","webpack://typescript/webpack/runtime/compat get default export","webpack://typescript/webpack/runtime/define property getters","webpack://typescript/webpack/runtime/hasOwnProperty shorthand","webpack://typescript/webpack/runtime/make namespace object","webpack://typescript/external commonjs \"k6\"","webpack://typescript/external commonjs \"k6/http\"","webpack://typescript/./src/tests.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/http\");","import { check } from 'k6';\nimport { Options, Scenario } from 'k6/options';\nimport http from \"k6/http\";\n\nconst clusterURL = __ENV.DET_MASTER\nconst masterEndpoint = '/api/v1/master'\n// const userEndpoint = '/api/v1/users'\n// const vuIDs = {};\n// const userInfo = {};\n\nconst scenarios: { [name: string]: Scenario } = {\n    smoke_test: {\n        tags: { test_type: 'smoke' },\n        executor: 'shared-iterations',\n        vus: 3,\n        maxDuration: \"5s\",\n        iterations: 5\n    },\n    // average_load_test: {\n    //     tags: { test_type: 'average' },\n    //     executor: 'ramping-vus',\n    //     stages: [\n    //         { duration: '10s', target: 50 },\n    //         { duration: '60s', target: 50 },\n    //         { duration: '10s', target: 0 }\n    //     ],\n    //     startTime: \"1m\"\n    // },\n    // stress_test: {\n    //     tags: { test_type: 'stress' },\n    //     executor: 'ramping-vus',\n    //     stages: [\n    //         { duration: '10s', target: 175 },\n    //         { duration: '20s', target: 175 },\n    //         { duration: '10s', target: 0 }\n    //     ],\n    //     startTime: \"140s\"\n    // },\n    // soak_test: {\n    //     tags: { test_type: 'soak' },\n    //     executor: 'ramping-vus',\n    //     stages: [\n    //         { duration: '5s', target: 50 },\n    //         { duration: '1m', target: 50 },\n    //         { duration: '1m', target: 0 }\n    //     ],\n    //     startTime: \"180s\"\n    // },\n    // spike_test: {\n    //     tags: { test_type: 'spike' },\n    //     executor: 'ramping-vus',\n    //     stages: [\n    //         { duration: '1m', target: 500 },\n    //         { duration: '15s', target: 0 },\n    //     ],\n    //     startTime: \"305s\"\n    // },\n    // breakpoint_test: {\n    //     tags: { test_type: 'breakpoint' },\n    //     executor: 'ramping-arrival-rate',\n    //     preAllocatedVUs: 0,\n    //     stages: [\n    //         { duration: '2m', target: 30000 },\n    //     ],\n    //     startTime: \"380s\",\n    // },\n}\n\nexport const options: Options = {\n    scenarios, thresholds: {\n        'http_req_failed{test_type:breakpoint}': [{\n            threshold: 'rate<0.05',\n            abortOnFail: true,\n        },]\n    },\n};\n\n// test per endpoint per filter set\n//   for each test, at least smoke test + average load\n\n// export function setup() {\n\n//     const userRequest = http.get(`${clusterURL}${userEndpoint}`);\n//     console.log(`Status is: ${userRequest.status}`);\n//     const userIds = Array.from(Array(100).keys())\n//     const userInformation = userIds.map((u) => ({\n//         id: `u-${u}`,\n//         displayName: `user_${u}`,\n//     }));\n//     userInformation.forEach((u) => vuIDs)\n//     userInfo = userInformation;\n// }\n\nexport default function () {\n    // const vuId = vu.idInTest;\n    // const userVuInfo = \n    const res = http.get(`${clusterURL}${masterEndpoint}`);\n    check(res, { '200 response': (r) => r.status == 200 });\n}"],"names":["check","http","clusterURL","__ENV","DET_MASTER","masterEndpoint","scenarios","smoke_test","tags","test_type","executor","vus","maxDuration","iterations","options","thresholds","threshold","abortOnFail","res","get","r","status"],"sourceRoot":""}