ALTER TABLE experiments RENAME TO experiments_v2;

CREATE TABLE run_collections (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name text NOT NULL,
    state experiment_state NOT NULL, -- rename to run_state? Or make a new copy?
    notes text NOT NULL,
    project_id integer NOT NULL REFERENCES projects(id),
    owner_id integer NOT NULL REFERENCES users(id),
    progres double precision,
    archived NOT NULL DEFAULT false
);

INSERT INTO run_collections (id, name, state, notes, project_id, owner_id, progres, archived)
SELECT id, 'experiment_id:' || id, state, notes, project_id, owner_id, progres, archived
FROM experiments_v2;

ALTER TABLE experiments_v2
  DROP COLUMN state,
  DROP COLUMN notes,
  -- Keeping project_id on both ? ? ?, Honestly why should it be on experiments_v2???
  DROP COLUMN owner_id,
  DROP COLUMN progres,
  DROP COLUMN archived;


CREATE VIEW experiments
SELECT
  -- experiments_v2.
  e.id AS id, -- TODO
  e.config AS config,
  e.model_definition AS model_definition,
  e.git_remote AS git_remote,           -- TODO delete.
  e.git_commit AS git_commit,           -- TODO delete.
  e.git_committer AS git_committer,     -- TODO delete.
  e.git_commit_date AS git_commit_date, -- TODO delete.
  e.model_packages AS model_packages,   -- TODO delete.
  e.parent_id AS parent_id,
  e.original_config AS original_config,
  e.job_id AS job_id,
  e.best_trial_id AS best_trial_id,
  e.unmanaged AS unmanaged,
  e.external_experiment_id AS external_experiment_id, -- TODO what should we do with this.

  -- run_collections.
  rc.name AS name, -- TODO migrate experiment ID over.
  rc.state AS state,
  rc.notes AS notes,
  rc.project_id AS project_id,
  rc.owner_id AS owner_id,
  rc.progress AS progress,
  rc.archived AS archived,

  rc.start_time AS start_time,
  rc.end_time AS end_time,
  rc.checkpoint_size AS checkpoint_size,
  rc.checkpoint_count AS checkpoint_count,
FROM experiments_v2 e
JOIN run_collections rc ON e.id = rc.id;
